@namespace Devity.Blazor
@using Microsoft.AspNetCore.Components.Web
@using System.Linq.Expressions;
@typeparam TValue

<div class='devity-select @(_expand ? "active" : string.Empty)' style="@Style">
    <button class='devity-select-toggle'
            role="combobox"
            aria-labelledby="select button"
            aria-haspopup="listbox_@_identifier"
            aria-expanded=@_expand
            aria-controls="devity-select-options_@_identifier"
            @onclick="async () => await SetState(!_expand)"
            @onclick:preventDefault=true>
        @if(string.IsNullOrWhiteSpace(_showcasedText))
        {
            if(string.IsNullOrWhiteSpace(DefaultShowcasedText))
            {
                <span class="devity-select-value">&nbsp;</span>
            } else
            {
                <span class="devity-select-value">@DefaultShowcasedText</span>
            }
        } else
        {
            <span class="devity-select-value">@_showcasedText</span>
        }
        <svg class="devity-select-arrow" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'><path fill='none' stroke='#8a8a8a' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6' /></svg>
    </button>
    <ul class="devity-select-options" role="listbox_@_identifier" id="devity-select-options_@_identifier">
        @foreach(var item in Items)
        {
            <li class="devity-select-option" role="option" @onclick="() => SelectOption(item)" @onkeyup="() => SelectOption(item)">
                <input type="radio" name="@_identifier" id="input_@(_identifier)_@item.Key" />
                @if (!string.IsNullOrWhiteSpace(item.Key))
                {
                    <label for="input_@(_identifier)_@item.Key">@item.Key</label>
                } else
                {
                    <label for="input_@(_identifier)_@item.Key">&nbsp;</label>
                }
            </li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public required Dictionary<string, TValue?> Items { get; set; }

    [Parameter] 
    public required TValue? Value { get; set; }
    [Parameter] 
    public required EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] 
    public required Expression<Func<TValue?>> ValueExpression { get; set; }
    [Parameter] 
    public Func<TValue?, TValue?>? ConvertMethod { get; set; }

    [Parameter]
    public string DefaultShowcasedText { get; set; } = string.Empty;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnOpen { get; set; }

    [Parameter]
    public EventCallback OnClosed { get; set; }

    private bool _expand;
    private string? _showcasedText;
    private Guid _identifier = Guid.NewGuid();
    private CancellationTokenSource? _cts;
    private Task? _delayTask;

    protected override void OnInitialized()
    {
        ConvertMethod = item => item is TValue value ? value : default;

        if(Value is not null)
        {
            _showcasedText = Items.FirstOrDefault(x => Value.Equals(x.Value)).Key;
        }
    }

    private async void SelectOption(KeyValuePair<string, TValue?> item)
    {
        if (ConvertMethod is null)
            throw new Exception("ConvertMethod was null.");

        _showcasedText = item.Key;
        await SetState(false);

        var value = ConvertMethod(item.Value);

        if (Value != null && Value.Equals(value)) return;

        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

    private async Task CancelRunningDelay()
    {
        if (_delayTask is not null && !_delayTask.IsCompleted && _cts is not null)
        {
            _cts.Cancel();
            try
            {
                await _delayTask;
            }
            catch (TaskCanceledException)
            {
                // Ignore
            }
            finally
            {
                _cts?.Dispose();
                _cts = null;
                _delayTask = null;
            }
        }
    }

    private async Task SetState(bool state)
    {
        await CancelRunningDelay();
        _expand = state;
        if (_expand)
            await OnOpen.InvokeAsync();
        else 
        {
            _cts = new CancellationTokenSource();
            _delayTask = Task.Delay(550, _cts.Token);
            try
            {
                await _delayTask;
                await OnClosed.InvokeAsync();
            }
            catch (TaskCanceledException)
            {
                // Ignore
            }
            finally
            {
                _cts?.Dispose();
                _cts = null;
                _delayTask = null;
            }
        }
    }
}